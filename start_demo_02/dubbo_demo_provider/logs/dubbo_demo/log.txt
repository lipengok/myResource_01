[INFO ] 2022-07-18 11:18:15,543(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:18:21,394(5851) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:21,395(5852) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:21,406(5863) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:21,407(5864) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:21,407(5864) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:21,410(5867) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider.service.impl], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:21,891(6348) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:22,040(6497) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:22,068(6525) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:22,164(6621) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:22,165(6622) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:22,166(6623) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:22,167(6624) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:22,168(6625) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:22,377(6834) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,179(8636) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,187(8644) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0006, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,238(8695) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,244(8701) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,245(8702) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,246(8703) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,247(8704) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,248(8705) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,249(8706) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,250(8707) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,253(8710) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,257(8714) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,257(8714) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:24,266(8723) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:24,267(8724) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,337(8794) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,363(8820) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,465(8922) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,481(8938) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,493(8950) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13268&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658113365245 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13268&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658113365245 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13268&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658113365245}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,568(9025) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7928&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114304434, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,589(9046) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,623(9080) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,672(9129) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:24,690(9147) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,707(9164) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,761(9218) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,941(9398) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:24,976(9433) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,353(12810) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:61154 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,368(12825) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x6061359e, L:/172.17.228.17:61154 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,369(12826) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:28,407(12864) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,435(12892) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,651(13108) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,653(13110) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7928&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114304434], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,654(13111) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7928&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114304434, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,654(13111) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,675(13132) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,675(13132) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,676(13133) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,689(13146) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:61154-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,691(13148) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x6061359e, L:/172.17.228.17:61154 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,718(13175) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61154 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:28,723(13180) --> [Dubbo-thread-1] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:20880,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,732(13189) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,736(13193) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,739(13196) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:34,811(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:19:41,139(6328) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:41,140(6329) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:41,161(6350) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:292):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo_provider.service.DemoService, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:41,161(6350) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'demoServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.impl.DemoServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\impl\DemoServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:41,162(6351) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:41,163(6352) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:41,166(6355) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:299):  [DUBBO] The Duplicated BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean[ bean name : ServiceBean:com.lp.dubbo_demo_provider.service.DemoService] was be found , Did @DubboComponentScan scan to same package in many times?, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:41,167(6356) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'demoServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.impl.DemoServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\impl\DemoServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider.service.impl], dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:41,650(6839) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:41,651(6840) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:41,651(6840) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:41,651(6840) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:41,652(6841) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:44,471(9660) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:44,692(9881) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:44,736(9925) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:44,885(10074) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:46,833(12022) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:46,842(12031) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0007, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,910(12099) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,921(12110) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,922(12111) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,923(12112) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,924(12113) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,924(12113) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,925(12114) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,926(12115) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,926(12115) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,930(12119) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:46,931(12120) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:46,941(12130) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:46,942(12131) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:46,987(12176) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,012(12201) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:47,095(12284) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,112(12301) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,123(12312) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7928&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114304374 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,129(12318) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=2920&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114387063, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:47,145(12334) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,161(12350) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,201(12390) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:47,214(12403) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:47,226(12415) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:47,292(12481) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:47,483(12672) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:47,529(12718) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:50,999(16188) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:61211 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,012(16201) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x567107a1, L:/172.17.228.17:61211 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,012(16201) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:51,048(16237) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,078(16267) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,253(16442) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,255(16444) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=2920&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114387063], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,256(16445) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=2920&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114387063, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,257(16446) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,270(16459) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,270(16459) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,271(16460) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,282(16471) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:61211-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,284(16473) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x567107a1, L:/172.17.228.17:61211 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,290(16479) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,292(16481) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,294(16483) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:14,919(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:24:20,591(5672) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:20,592(5673) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:20,600(5681) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:20,601(5682) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:20,602(5683) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:20,604(5685) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider.service.impl], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:21,078(6159) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:21,240(6321) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:21,266(6347) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:21,376(6457) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:21,378(6459) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:21,378(6459) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:21,380(6461) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:21,381(6462) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:21,571(6652) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,354(8435) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,361(8442) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0008, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,429(8510) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,432(8513) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,432(8513) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,433(8514) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,433(8514) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,434(8515) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,434(8515) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,435(8516) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,435(8516) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,438(8519) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,439(8520) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:23,447(8528) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:23,448(8529) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,509(8590) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,550(8631) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,638(8719) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,653(8734) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,666(8747) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=2920&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114387025 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,738(8819) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=12592&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114663606, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,761(8842) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,794(8875) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,850(8931) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:23,866(8947) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,886(8967) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:23,924(9005) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:24,149(9230) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:24,192(9273) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,354(12435) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:61300 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,369(12450) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x0a27aa23, L:/172.17.228.17:61300 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,370(12451) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:27,404(12485) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,431(12512) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,592(12673) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,596(12677) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=12592&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114663606], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,597(12678) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=12592&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114663606, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,598(12679) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,619(12700) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,620(12701) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,621(12702) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,647(12728) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:61300-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,653(12734) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x0a27aa23, L:/172.17.228.17:61300 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,662(12743) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,664(12745) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,670(12751) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:26,798(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:25:32,718(5920) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:32,718(5920) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:32,740(5942) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:292):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo_provider.service.DemoService, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:32,741(5943) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'demoServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.impl.DemoServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\impl\DemoServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:32,742(5944) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:32,743(5945) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:32,748(5950) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:299):  [DUBBO] The Duplicated BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean[ bean name : ServiceBean:com.lp.dubbo_demo_provider.service.DemoService] was be found , Did @DubboComponentScan scan to same package in many times?, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:32,748(5950) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'demoServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.impl.DemoServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\impl\DemoServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider.service.impl], dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:33,222(6424) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:33,223(6425) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:33,223(6425) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:33,223(6425) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:33,224(6426) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:36,193(9395) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:36,395(9597) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:36,442(9644) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:36,588(9790) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,431(11633) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,441(11643) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0009, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,503(11705) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,513(11715) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,514(11716) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,515(11717) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,516(11718) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,516(11718) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,517(11719) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,519(11721) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,522(11724) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,527(11729) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,528(11730) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:38,544(11746) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:38,546(11748) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,589(11791) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,618(11820) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,715(11917) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,727(11929) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,738(11940) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12592&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114663569 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,745(11947) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=5552&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114738681, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,765(11967) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,783(11985) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,844(12046) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:38,868(12070) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,889(12091) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:38,951(12153) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:39,144(12346) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:39,198(12400) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,549(15751) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:61344 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,559(15761) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x60c04b50, L:/172.17.228.17:61344 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,560(15762) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:42,601(15803) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,636(15838) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,778(15980) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,781(15983) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=5552&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114738681], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,781(15983) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=5552&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114738681, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,782(15984) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,793(15995) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,794(15996) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,795(15997) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,811(16013) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:61344-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,812(16014) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x60c04b50, L:/172.17.228.17:61344 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,816(16018) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,819(16021) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,822(16024) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:26:56,677(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:27:02,606(5929) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:02,607(5930) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:02,616(5939) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:02,617(5940) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:02,618(5941) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:02,621(5944) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider.service.impl], dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:03,119(6442) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:03,120(6443) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:03,120(6443) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:03,121(6444) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:03,121(6444) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:05,974(9297) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:07,881(11204) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:07,888(11211) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d000a, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,936(11259) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,946(11269) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,951(11274) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,951(11274) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,952(11275) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,953(11276) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,953(11276) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,954(11277) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,955(11278) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,959(11282) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:07,959(11282) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:07,970(11293) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:07,971(11294) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,022(11345) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,042(11365) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,042(11365) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:742):  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,050(11373) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:758):  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,238(11561) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,336(11659) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,391(11714) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,506(11829) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,519(11842) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,527(11850) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=5552&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114738633 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,533(11856) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=13812&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114828479, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,553(11876) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,576(11899) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,628(11951) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:08,650(11973) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,663(11986) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,709(12032) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,935(12258) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:08,979(12302) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,159(15482) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:61380 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,173(15496) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x4ace08c6, L:/172.17.228.17:61380 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,174(15497) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:12,210(15533) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,240(15563) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,349(15672) --> [SpringContextShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=13812&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114828479], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,351(15674) --> [SpringContextShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=13812&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658114828479, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,352(15675) --> [SpringContextShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,394(15717) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,398(15721) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,466(15789) --> [SpringContextShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,467(15790) --> [SpringContextShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,468(15791) --> [SpringContextShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,480(15803) --> [SpringContextShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:61380-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,481(15804) --> [SpringContextShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x4ace08c6, L:/172.17.228.17:61380 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,487(15810) --> [SpringContextShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,489(15812) --> [SpringContextShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,502(15825) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61380 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:12,504(15827) --> [Dubbo-thread-1] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:20880,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:12,505(15828) --> [SpringContextShutdownHook] org.apache.dubbo.config.bootstrap.DubboBootstrap.destroyServiceDiscoveries(DubboBootstrap.java:1074):  [DUBBO] DubboBootstrap's all ServiceDiscoveries have been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:12,506(15829) --> [SpringContextShutdownHook] org.apache.dubbo.config.bootstrap.DubboBootstrap.clearConfigs(DubboBootstrap.java:1090):  [DUBBO] DubboBootstrap's configs have been clear., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,507(15830) --> [SpringContextShutdownHook] org.apache.dubbo.config.bootstrap.DubboBootstrap.lambda$release$25(DubboBootstrap.java:1098):  [DUBBO] DubboBootstrap is about to shutdown..., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-19 08:48:57,970(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-19 08:49:01,357(3387) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:01,357(3387) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-19 08:49:01,404(3434) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:01,404(3434) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:04,927(6957) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,099(7129) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:05,270(7300) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,412(7442) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,443(7473) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,458(7488) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:05,474(7504) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:05,474(7504) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:05,474(7504) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.6.2&pid=16268&registry=zookeeper&timeout=10000&timestamp=1658191745318, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,505(7535) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,537(7567) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,661(7691) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,693(7723) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,708(7738) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:05,882(7912) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:07,543(9573) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:07,559(9589) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:07,574(9604) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:07,903(9933) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:27,721(29751) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:27,743(29773) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:27,745(29775) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:27,745(29775) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:27,756(29786) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-19 08:49:27,770(29800) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,333(30363) --> [DubboShutdownHook] com.alibaba.dubbo.config.AbstractConfig$1.run(AbstractConfig.java:81):  [DUBBO] Run shutdown hook now., dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,334(30364) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:64):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.6.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=16268&timeout=10000&timestamp=1658191745318], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,334(30364) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:451):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.6.2&interface=com.alibaba.dubbo.registry.RegistryService&pid=16268&timeout=10000&timestamp=1658191745318, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,336(30366) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:284):  [DUBBO] Unregister: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,355(30385) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:460):  [DUBBO] Destroy unregister url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,355(30385) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:317):  [DUBBO] Unsubscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,356(30386) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:476):  [DUBBO] Destroy unsubscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,397(30427) --> [DubboShutdownHook] com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.destroy(DubboProtocol.java:424):  [DUBBO] Close dubbo server: /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,399(30429) --> [DubboShutdownHook] com.alibaba.dubbo.remoting.transport.AbstractServer.close(AbstractServer.java:145):  [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,402(30432) --> [DubboShutdownHook] com.alibaba.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:76):  [DUBBO] Unexport service: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-19 08:49:28,402(30432) --> [DubboShutdownHook] com.alibaba.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:76):  [DUBBO] Unexport service: injvm://127.0.0.1/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=16268&side=provider&timestamp=1658191745333, dubbo version: 2.6.2, current host: 172.17.228.17  
