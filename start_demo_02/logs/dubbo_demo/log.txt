[INFO ] 2022-07-18 11:06:41,038(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:06:46,225(5187) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:46,226(5188) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:46,238(5200) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:46,239(5201) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:46,240(5202) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:46,242(5204) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo.service.impl], dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:47,119(6081) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:47,120(6082) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:47,120(6082) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:47,120(6082) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:47,120(6082) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,405(7367) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:48,603(7565) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:48,606(7568) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0004, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,649(7611) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,6,0,0,0,6,581
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,656(7618) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,658(7620) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,658(7620) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,659(7621) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,659(7621) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,660(7622) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 11:06:48,660(7622) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:48,669(7631) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 11:06:48,669(7631) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:48,693(7655) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:48,703(7665) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:48,703(7665) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:742):  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:06:48,707(7669) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:758):  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 11:12:58,048(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 11:13:03,454(5406) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:03,455(5407) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:03,489(5441) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:292):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo.service.UserService, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:03,489(5441) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo.service.impl.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo\target\classes\com\lp\dubbo_demo\service\impl\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:03,490(5442) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:03,490(5442) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:03,495(5447) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:299):  [DUBBO] The Duplicated BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean[ bean name : ServiceBean:com.lp.dubbo_demo.service.UserService] was be found , Did @DubboComponentScan scan to same package in many times?, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:03,506(5458) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo.service.impl.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo\target\classes\com\lp\dubbo_demo\service\impl\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo.service.impl], dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:05,010(6962) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:05,010(6962) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:05,010(6962) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:05,011(6963) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:05,011(6963) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,278(8230) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,381(8333) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,521(8473) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,663(8615) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,666(8618) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0005, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,709(8661) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,6,0,0,0,6,581
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,713(8665) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,714(8666) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,716(8668) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,719(8671) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,720(8672) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,721(8673) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,721(8673) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:06,729(8681) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:06,729(8681) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,754(8706) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,765(8717) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,765(8717) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:742):  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,799(8751) --> [main] org.apache.dubbo.config.ServiceConfig.findConfigedHosts(ServiceConfig.java:574):  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:13:06,825(8777) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,829(8781) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,842(8794) --> [main] org.apache.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:531):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry url : injvm://127.0.0.1/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,843(8795) --> [main] org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:477):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779 to registry registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo&dubbo=2.0.2&pid=8124&qos.enable=false&registry=zookeeper&release=2.7.6&timeout=10000&timestamp=1658113986776, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,858(8810) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,874(8826) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:06,883(8835) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,901(8853) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:06,916(8868) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,413(12365) --> [main] org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:73):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,425(12377) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,449(12401) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=8124&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658113986776, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,455(12407) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,470(12422) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,477(12429) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,478(12430) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:582):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,478(12430) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:586):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,480(12432) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,544(12496) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,548(12500) --> [main] org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping.lambda$map$0(DynamicConfigurationServiceNameMapping.java:61):  [DUBBO] Dubbo service[null] mapped to interface name[com.lp.dubbo_demo.service.UserService]., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,550(12502) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:13:10,553(12505) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:13:10,556(12508) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:758):  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,381(330333) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61154 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:18:28,739(330691) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:18:28,741(330693) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:61154 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:18:28,742(330694) --> [DubboServerHandler-172.17.228.17:20880-thread-2] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:61154,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:50,995(412947) --> [NettyServerWorker-3-2] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61211 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:19:51,287(413239) --> [NettyServerWorker-3-2] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:19:51,287(413239) --> [NettyServerWorker-3-2] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:61211 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:19:51,288(413240) --> [DubboServerHandler-172.17.228.17:20880-thread-4] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:61211,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,348(689300) --> [NettyServerWorker-3-3] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61300 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:24:27,656(689608) --> [NettyServerWorker-3-3] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:24:27,656(689608) --> [NettyServerWorker-3-3] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:61300 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:24:27,671(689623) --> [DubboServerHandler-172.17.228.17:20880-thread-6] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:61300,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,547(764499) --> [NettyServerWorker-3-4] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61344 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:25:42,815(764767) --> [NettyServerWorker-3-4] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:25:42,815(764767) --> [NettyServerWorker-3-4] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:61344 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:25:42,817(764769) --> [DubboServerHandler-172.17.228.17:20880-thread-8] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:61344,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,151(854103) --> [NettyServerWorker-3-5] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:61380 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 11:27:12,484(854436) --> [NettyServerWorker-3-5] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 11:27:12,485(854437) --> [NettyServerWorker-3-5] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:61380 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 11:27:12,487(854439) --> [DubboServerHandler-172.17.228.17:20880-thread-10] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:61380,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658113986779, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 13:54:26,937(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 13:54:32,904(5967) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:32,904(5967) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:32,926(5989) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:292):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo.service.UserService, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:32,927(5990) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo.service.impl.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo\target\classes\com\lp\dubbo_demo\service\impl\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:32,928(5991) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:32,928(5991) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:32,930(5993) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:299):  [DUBBO] The Duplicated BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean[ bean name : ServiceBean:com.lp.dubbo_demo.service.UserService] was be found , Did @DubboComponentScan scan to same package in many times?, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:32,931(5994) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo.service.impl.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo\target\classes\com\lp\dubbo_demo\service\impl\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo.service.impl], dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:34,143(7206) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:34,144(7207) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:34,144(7207) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:34,145(7208) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:34,146(7209) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:35,580(8643) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:35,698(8761) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:35,848(8911) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:35,989(9052) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:35,993(9056) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d000b, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,033(9096) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,040(9103) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,041(9104) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,042(9105) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,043(9106) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,044(9107) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,045(9108) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,047(9110) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,047(9110) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,1,0,0,13,1,1562
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,051(9114) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=[49, 54, 53, 56, 49, 49, 51, 57, 57, 48, 53, 50, 50]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,051(9114) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:36,057(9120) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:36,058(9121) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,077(9140) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,087(9150) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,087(9150) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:742):  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,116(9179) --> [main] org.apache.dubbo.config.ServiceConfig.findConfigedHosts(ServiceConfig.java:574):  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:54:36,140(9203) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,144(9207) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,154(9217) --> [main] org.apache.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:531):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry url : injvm://127.0.0.1/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,155(9218) --> [main] org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:477):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099 to registry registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo&dubbo=2.0.2&pid=8136&qos.enable=false&registry=zookeeper&release=2.7.6&timeout=10000&timestamp=1658123676096, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,169(9232) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,181(9244) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:36,189(9252) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,208(9271) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:36,223(9286) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,314(12377) --> [main] org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:73):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:39,318(12381) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,333(12396) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&qos.enable=false&release=2.7.6&side=provider&timestamp=1658113986779}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,333(12396) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=8136&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658123676096, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,336(12399) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&release=2.7.6&side=provider&timestamp=1658123676099, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,352(12415) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,358(12421) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099], dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:39,359(12422) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:582):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099], dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:39,359(12422) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:586):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&timestamp=1658123676099], dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:39,361(12424) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:39,401(12464) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1562,1562,1658113990544,1658113990544,0,0,0,0,13,0,1562
, data=null}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,409(12472) --> [main] org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping.lambda$map$0(DynamicConfigurationServiceNameMapping.java:61):  [DUBBO] Dubbo service[null] mapped to interface name[com.lp.dubbo_demo.service.UserService]., dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:54:39,412(12475) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:54:39,415(12478) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:758):  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:34,190(1) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 13:55:39,176(4987) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:39,177(4988) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:39,186(4997) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:39,187(4998) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:39,187(4998) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:39,189(5000) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_provider.service.impl], dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,034(5845) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,128(5939) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,145(5956) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,217(6028) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,218(6029) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,219(6030) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,219(6030) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,220(6031) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,343(6154) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,485(6296) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,488(6299) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d000c, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,536(6347) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,545(6356) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,546(6357) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,547(6358) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,547(6358) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,549(6360) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,550(6361) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,551(6362) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,551(6362) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,3,0,0,13,1,1587
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,555(6366) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,556(6367) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,564(6375) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:40,565(6376) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,592(6403) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,602(6413) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,645(6456) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,653(6464) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,656(6467) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13812&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658114828448 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8124&release=2.7.6&side=provider&timestamp=1658113986779}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,660(6471) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7788&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658123740629, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,671(6482) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,681(6492) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,710(6521) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:40,723(6534) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&release=2.7.6&side=provider&timestamp=1658123676099, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609], dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,735(6546) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,769(6580) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,844(6655) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:40,864(6675) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,038(9849) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:56370 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,051(9862) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 172.17.228.17 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x79f3d2d8, L:/172.17.228.17:56370 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,052(9863) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /172.17.228.17 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,061(77124) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:56370 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:44,075(9886) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,093(9904) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&register.ip=172.17.228.17&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,176(9987) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,178(9989) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7788&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658123740629], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,178(9989) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7788&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658123740629, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,178(9989) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,189(10000) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,189(10000) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,189(10000) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,200(10011) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:56370-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,204(10015) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x79f3d2d8, L:/172.17.228.17:56370 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,208(10019) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&register.ip=172.17.228.17&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658123676099, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,210(10021) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,212(10023) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,214(10025) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:56370 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:44,215(10026) --> [Dubbo-thread-1] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:20880,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&check=false&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&register.ip=172.17.228.17&release=2.7.6&remote.application=dubbo_demo&side=consumer&sticky=false&timestamp=1658123676099, dubbo version: 2.7.6, current host: 172.17.228.17  
[WARN ] 2022-07-18 13:55:44,235(77298) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 13:55:44,236(77299) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:56370 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 172.17.228.17  
[DEBUG] 2022-07-18 13:55:44,236(77299) --> [DubboServerHandler-172.17.228.17:20880-thread-2] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:56370,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658123676099, dubbo version: 2.7.6, current host: 172.17.228.17  
[INFO ] 2022-07-18 14:20:19,440(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 14:20:24,499(5059) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:24,499(5059) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:24,520(5080) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:292):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo.service.UserService, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:24,520(5080) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:24,521(5081) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:24,521(5081) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:24,525(5085) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:299):  [DUBBO] The Duplicated BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean[ bean name : ServiceBean:com.lp.dubbo_demo.service.UserService] was be found , Did @DubboComponentScan scan to same package in many times?, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:24,525(5085) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider.service], dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:25,622(6182) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:25,622(6182) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:25,623(6183) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:25,623(6183) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:25,624(6184) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:26,905(7465) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:26,992(7552) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,124(7684) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,283(7843) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,287(7847) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d000d, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,325(7885) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,330(7890) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,331(7891) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,332(7892) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,335(7895) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,335(7895) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,338(7898) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,339(7899) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,340(7900) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,3,0,0,13,1,1587
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,343(7903) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,343(7903) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:27,352(7912) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:27,352(7912) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,381(7941) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,393(7953) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,393(7953) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:742):  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,432(7992) --> [main] org.apache.dubbo.config.ServiceConfig.findConfigedHosts(ServiceConfig.java:574):  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:20:27,460(8020) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,464(8024) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,475(8035) --> [main] org.apache.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:531):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry url : injvm://127.0.0.1/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,476(8036) --> [main] org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:477):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409 to registry registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&pid=14384&qos.enable=false&registry=zookeeper&release=2.7.6&timeout=10000&timestamp=1658125227407, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,490(8050) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,505(8065) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:27,513(8073) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,533(8093) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:27,564(8124) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,679(11239) --> [main] org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:73):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:30,685(11245) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,702(11262) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_provider&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7788&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658123740609 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8136&release=2.7.6&side=provider&timestamp=1658123676099}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,703(11263) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=14384&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658125227407, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,708(11268) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&release=2.7.6&side=provider&timestamp=1658125227409, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,725(11285) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,731(11291) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:30,732(11292) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:582):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:30,732(11292) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:586):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:30,734(11294) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,774(11334) --> [main] org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping.lambda$map$0(DynamicConfigurationServiceNameMapping.java:61):  [DUBBO] Dubbo service[null] mapped to interface name[com.lp.dubbo_demo.service.UserService]., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:20:30,783(11343) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1595,1595,1658125230770,1658125230770,0,0,0,0,13,0,1595
, data=[49, 54, 53, 56, 49, 50, 53, 50, 51, 48, 55, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:20:30,783(11343) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:758):  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:21:05,525(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 14:21:12,051(6526) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:21:12,051(6526) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:21:12,060(6535) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_consumer], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:21:14,366(8841) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:21:14,546(9021) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:21:14,609(9084) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:21:14,780(9255) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:21:14,781(9256) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:21:14,782(9257) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:21:14,782(9257) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:21:14,783(9258) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:21:15,000(9475) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:21:25,324(19799) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:21:25,330(19805) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:21:25,331(19806) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:08,207(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 14:23:14,736(6529) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:14,736(6529) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:14,741(6534) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:177):  [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.lp.dubbo_demo_consumer], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:15,993(7786) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,190(7983) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,244(8037) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,358(8151) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,358(8151) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,359(8152) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,360(8153) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,361(8154) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,517(8310) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:16,714(8507) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:16,719(8512) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d000e, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,783(8576) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,801(8594) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,804(8597) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,806(8599) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,810(8603) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,812(8605) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,813(8606) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,814(8607) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,815(8608) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,4,0,0,13,2,1595
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,819(8612) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,819(8612) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1595,1595,1658125230770,1658125230770,0,0,0,0,13,0,1595
, data=[49, 54, 53, 56, 49, 50, 53, 50, 51, 48, 55, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,820(8613) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,833(8626) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:16,834(8627) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:16,880(8673) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:16,894(8687) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:16,959(8752) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:16,972(8765) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:16,984(8777) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7992&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658125396936, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:17,009(8802) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:17,033(8826) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:17,077(8870) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:17,095(8888) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&release=2.7.6&side=provider&timestamp=1658125227409, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:17,114(8907) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:17,159(8952) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:17,279(9072) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:17,325(9118) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,306(13099) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:53450 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,322(13115) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0xb7e924c8, L:/172.17.228.17:53450 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,323(13116) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,337(181897) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:53450 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:21,360(13153) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,384(13177) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,501(13294) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,503(13296) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7992&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658125396936], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,503(13296) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=7992&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658125396936, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,504(13297) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,516(13309) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,518(13311) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,519(13312) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,533(13326) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:53450-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,543(13336) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0xb7e924c8, L:/172.17.228.17:53450 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,556(13349) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:53450 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:21,560(13353) --> [Dubbo-thread-1] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:20880,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125227409, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,562(13355) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125227409, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,565(13358) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,567(13360) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:23:21,596(182156) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:23:21,597(182157) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:53450 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:23:21,598(182158) --> [DubboServerHandler-172.17.228.17:20880-thread-2] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:53450,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658125227409, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:46,540(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 14:29:51,366(4826) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:212):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:51,366(4826) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:214):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:51,379(4839) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:292):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo.service.UserService, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:51,379(4839) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:169):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider.service], dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:52,785(6245) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:52,785(6245) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:52,785(6245) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:52,785(6245) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:52,786(6246) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,577(7037) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,663(7123) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,788(7248) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:53,930(7390) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:53,933(7393) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d000f, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,972(7432) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,977(7437) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,979(7439) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,980(7440) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,981(7441) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,981(7441) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,982(7442) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,982(7442) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,983(7443) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,4,0,0,13,2,1595
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,986(7446) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,987(7447) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1595,1595,1658125230770,1658125230770,0,0,0,0,13,0,1595
, data=[49, 54, 53, 56, 49, 50, 53, 50, 51, 48, 55, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:53,987(7447) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:53,995(7455) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:53,996(7456) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,028(7488) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,041(7501) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,041(7501) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:742):  [DUBBO] DubboBootstrap is starting..., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,082(7542) --> [main] org.apache.dubbo.config.ServiceConfig.findConfigedHosts(ServiceConfig.java:574):  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:29:54,114(7574) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:logger, try to find an extension (bean) of type org.apache.dubbo.common.logger.Logger, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:54,119(7579) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,130(7590) --> [main] org.apache.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:531):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry url : injvm://127.0.0.1/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,130(7590) --> [main] org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:477):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060 to registry registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&pid=12092&qos.enable=false&registry=zookeeper&release=2.7.6&timeout=10000&timestamp=1658125794057, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:54,145(7605) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:54,159(7619) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:54,167(7627) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:54,187(7647) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:54,204(7664) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,278(10738) --> [main] org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:73):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:57,283(10743) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,310(10770) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125227409}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,311(10771) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=12092&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658125794057, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,314(10774) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&release=2.7.6&side=provider&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,330(10790) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,336(10796) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:57,336(10796) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:582):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:57,337(10797) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:586):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&timestamp=1658125794060], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:57,339(10799) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:57,381(10841) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1595,1595,1658125230770,1658125230770,0,0,0,0,13,0,1595
, data=null}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,389(10849) --> [main] org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping.lambda$map$0(DynamicConfigurationServiceNameMapping.java:61):  [DUBBO] Dubbo service[null] mapped to interface name[com.lp.dubbo_demo.service.UserService]., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:29:57,393(10853) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1604,1604,1658125797383,1658125797383,0,0,0,0,13,0,1604
, data=[49, 54, 53, 56, 49, 50, 53, 55, 57, 55, 51, 54, 57]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:29:57,396(10856) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:758):  [DUBBO] DubboBootstrap has started., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:11,158(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 14:37:16,986(5828) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,082(5924) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,111(5953) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,176(6018) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,176(6018) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,177(6019) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,177(6019) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,178(6020) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,290(6132) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,438(6280) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,495(6337) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,500(6342) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,501(6343) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,502(6344) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,503(6345) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,504(6346) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,506(6348) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0011, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,506(6348) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,507(6349) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,507(6349) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,6,0,0,13,2,1604
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,509(6351) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,510(6352) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1604,1604,1658125797383,1658125797383,0,0,0,0,13,0,1604
, data=[49, 54, 53, 56, 49, 50, 53, 55, 57, 55, 51, 54, 57]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,510(6352) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,517(6359) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:17,518(6360) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,548(6390) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,560(6402) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,604(6446) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,612(6454) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,617(6459) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_consumer-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7992&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658125396905 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=14384&release=2.7.6&side=provider&timestamp=1658125227409}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,621(6463) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=15412&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126237587, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,633(6475) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,646(6488) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,676(6518) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:17,690(6532) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&release=2.7.6&side=provider&timestamp=1658125794060, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,701(6543) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,736(6578) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,807(6649) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:17,833(6675) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:20,964(9806) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:53920 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:20,975(9817) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0xc22d3824, L:/172.17.228.17:53920 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:20,976(9818) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:20,987(454447) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:53920 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:20,999(9841) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,018(9860) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,097(9939) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,099(9941) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=15412&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126237587], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,099(9941) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=15412&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126237587, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,100(9942) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,111(9953) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,111(9953) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,112(9954) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,122(9964) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:53920-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,126(9968) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0xc22d3824, L:/172.17.228.17:53920 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,129(9971) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,130(9972) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,132(9974) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,136(9978) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:53920 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:37:21,157(454617) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:37:21,157(454617) --> [NettyServerWorker-3-1] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:53920 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:37:21,158(454618) --> [DubboServerHandler-172.17.228.17:20880-thread-2] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:53920,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:13,646(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 14:40:19,264(5618) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,358(5712) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,386(5740) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,470(5824) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,471(5825) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,472(5826) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,472(5826) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,473(5827) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,583(5937) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,726(6080) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,730(6084) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0012, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,776(6130) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,782(6136) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,784(6138) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,787(6141) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,788(6142) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,790(6144) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,791(6145) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,791(6145) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,792(6146) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,6,0,0,13,2,1604
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,794(6148) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,795(6149) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1604,1604,1658125797383,1658125797383,0,0,0,0,13,0,1604
, data=[49, 54, 53, 56, 49, 50, 53, 55, 57, 55, 51, 54, 57]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,795(6149) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,803(6157) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:19,804(6158) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,828(6182) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,841(6195) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,886(6240) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,894(6248) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,899(6253) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_consumer-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15412&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126237567 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&release=2.7.6&side=provider&timestamp=1658125794060}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,904(6258) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=1248&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126419868, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,916(6270) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,928(6282) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,957(6311) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:19,971(6325) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&release=2.7.6&side=provider&timestamp=1658125794060, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:19,983(6337) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:20,013(6367) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:20,086(6440) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:20,111(6465) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,222(636682) --> [NettyServerWorker-3-2] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:54117 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,224(9578) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:54117 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,233(9587) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0xff424c29, L:/172.17.228.17:54117 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,233(9587) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:23,255(9609) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,274(9628) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,359(9713) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,362(9716) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=1248&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126419868], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,362(9716) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=1248&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126419868, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,362(9716) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,372(9726) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,372(9726) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,372(9726) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,391(9745) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:54117-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,395(9749) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0xff424c29, L:/172.17.228.17:54117 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,398(9752) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:40:23,399(636859) --> [NettyServerWorker-3-2] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,399(636859) --> [NettyServerWorker-3-2] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:54117 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:40:23,399(636859) --> [DubboServerHandler-172.17.228.17:20880-thread-4] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:54117,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,400(9754) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,402(9756) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:40:23,405(9759) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:54117 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:43:28,110(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 14:43:33,755(5645) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:43:33,852(5742) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:43:33,884(5774) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:43:33,961(5851) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:43:33,962(5852) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:43:33,962(5852) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:43:33,964(5854) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:43:33,965(5855) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:43:34,110(6000) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:43:34,126(6016) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:43:34,216(6106) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:43:34,220(6110) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:43:34,222(6112) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:45,628(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 14:44:52,060(6432) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public java.util.List getServers()  {
throw new UnsupportedOperationException("The method public default java.util.List org.apache.dubbo.rpc.Protocol.getServers() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,190(6562) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,206(6578) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,270(6642) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:ssl, try to find an extension (bean) of type org.apache.dubbo.config.SslConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,271(6643) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:monitor, try to find an extension (bean) of type org.apache.dubbo.config.MonitorConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,272(6644) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:module, try to find an extension (bean) of type org.apache.dubbo.config.ModuleConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,272(6644) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:metrics, try to find an extension (bean) of type org.apache.dubbo.config.MetricsConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,272(6644) --> [main] org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:75):  [DUBBO] No spring extension (bean) named:application, try to find an extension (bean) of type org.apache.dubbo.config.ApplicationConfig, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,359(6731) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,530(6902) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:71):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&timeout=10000, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,533(6905) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0013, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,578(6950) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,584(6956) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,585(6957) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,585(6957) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,587(6959) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,589(6961) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,589(6961) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,590(6962) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,591(6963) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,6,0,0,13,2,1604
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,595(6967) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,596(6968) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1604,1604,1658125797383,1658125797383,0,0,0,0,13,0,1604
, data=[49, 54, 53, 56, 49, 50, 53, 55, 57, 55, 51, 54, 57]}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,597(6969) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,607(6979) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:52,607(6979) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:106):  [DUBBO] You specified the config center, but there's not even one single config item in it., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,646(7018) --> [main] org.apache.dubbo.config.utils.ConfigValidationUtils.validateMonitorConfig(ConfigValidationUtils.java:423):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,664(7036) --> [main] org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:520):  [DUBBO] DubboBootstrap has been initialized!, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,722(7094) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,731(7103) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:97):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,736(7108) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:220):  [DUBBO] Load registry cache file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_consumer-127.0.0.1-2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847 empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1248&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126419847 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&release=2.7.6&side=provider&timestamp=1658125794060}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,739(7111) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:60):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=8240&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126692701, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,749(7121) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,763(7135) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:288):  [DUBBO] Register: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,790(7162) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:313):  [DUBBO] Subscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:52,803(7175) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:407):  [DUBBO] Notify urls for subscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&release=2.7.6&side=provider&timestamp=1658125794060, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, empty://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675], dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,814(7186) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,847(7219) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,947(7319) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:52,972(7344) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,692(910152) --> [NettyServerWorker-3-3] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(NettyServerHandler.java:76):  [DUBBO] The connection of /172.17.228.17:54299 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,695(11067) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelActive(NettyClientHandler.java:62):  [DUBBO] The connection of /172.17.228.17:54299 -> /172.17.228.17:20880 is established., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,703(11075) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:200):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 192.168.113.66 using dubbo version 2.7.6, channel is NettyChannel [channel=[id: 0x21149787, L:/172.17.228.17:54299 - R:/172.17.228.17:20880]], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,704(11076) --> [main] org.apache.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:73):  [DUBBO] Start NettyClient /192.168.113.66 connect to the server /172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:56,727(11099) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:107):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,744(11116) --> [main] org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:352):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,827(11199) --> [DubboShutdownHook] org.apache.dubbo.config.DubboShutdownHook.run(DubboShutdownHook.java:70):  [DUBBO] Run shutdown hook now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,828(11200) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:80):  [DUBBO] Close all registries [zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=8240&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126692701], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,829(11201) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:466):  [DUBBO] Destroy registry:zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=8240&qos.enable=false&release=2.7.6&timeout=10000&timestamp=1658126692701, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,829(11201) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unregister(AbstractRegistry.java:299):  [DUBBO] Unregister: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,838(11210) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:475):  [DUBBO] Destroy unregister url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,838(11210) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.unsubscribe(AbstractRegistry.java:328):  [DUBBO] Unsubscribe: consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,839(11211) --> [DubboShutdownHook] org.apache.dubbo.registry.support.AbstractRegistry.destroy(AbstractRegistry.java:491):  [DUBBO] Destroy unsubscribe url consumer://192.168.113.66/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.0.2&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&release=2.7.6&side=consumer&sticky=false&timestamp=1658126692675, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,849(11221) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.closeReferenceCountExchangeClient(DubboProtocol.java:652):  [DUBBO] Close dubbo connect: /172.17.228.17:54299-->/172.17.228.17:20880, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,853(11225) --> [DubboShutdownHook] org.apache.dubbo.remoting.transport.netty4.NettyChannel.close(NettyChannel.java:201):  [DUBBO] Close netty channel [id: 0x21149787, L:/172.17.228.17:54299 - R:/172.17.228.17:20880], dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,856(11228) --> [DubboShutdownHook] org.apache.dubbo.rpc.protocol.AbstractProtocol.destroy(AbstractProtocol.java:79):  [DUBBO] Destroy reference: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[WARN ] 2022-07-18 14:44:56,856(910316) --> [NettyServerWorker-3-3] org.apache.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:188):  [DUBBO] All clients has disconnected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,857(910317) --> [NettyServerWorker-3-3] org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelInactive(NettyServerHandler.java:91):  [DUBBO] The connection of /172.17.228.17:54299 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:56,857(910317) --> [DubboServerHandler-172.17.228.17:20880-thread-6] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:54299,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=12092&qos.enable=false&release=2.7.6&side=provider&threadname=DubboServerHandler-172.17.228.17:20880&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,858(11230) --> [DubboShutdownHook] org.apache.dubbo.qos.server.Server.stop(Server.java:120):  [DUBBO] qos-server stopped., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,860(11232) --> [DubboShutdownHook] org.apache.dubbo.config.event.listener.LoggingEventListener.onEvent(LoggingEventListener.java:42):  [DUBBO] Dubbo Service has been destroyed., dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 14:44:56,863(11235) --> [NettyClientWorker-1-1] org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.channelInactive(NettyClientHandler.java:76):  [DUBBO] The connection of /172.17.228.17:54299 -> /172.17.228.17:20880 is disconnected., dubbo version: 2.7.6, current host: 192.168.113.66  
[DEBUG] 2022-07-18 14:44:56,864(11236) --> [Dubbo-thread-1] org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:167):  [DUBBO] disconnected from /172.17.228.17:20880,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&init=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8240&qos.enable=false&register.ip=192.168.113.66&release=2.7.6&remote.application=dubbo_demo_provider&side=consumer&sticky=false&timestamp=1658125794060, dubbo version: 2.7.6, current host: 192.168.113.66  
[INFO ] 2022-07-18 15:06:40,615(0) --> [main] : using logger: org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 15:06:42,523(1908) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:207):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:42,523(1908) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:209):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:42,544(1929) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:287):  [DUBBO] The BeanDefinition[Root bean: class [org.apache.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:com.lp.dubbo_demo.service.UserService, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:42,544(1929) --> [main] org.apache.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:164):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider.service], dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:44,848(4233) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:44,936(4321) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,028(4413) --> [main] org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:112):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,059(4444) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.remoting.zookeeper;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter {
public org.apache.dubbo.remoting.zookeeper.ZookeeperClient connect(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,215(4600) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:69):  [DUBBO] No valid zookeeper client found from cache, therefore create a new client for url. zookeeper://127.0.0.1:2181/ConfigCenterConfig?check=true&config-file=dubbo.properties&group=dubbo&highest-priority=false&namespace=dubbo&timeout=3000, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,217(4602) --> [Curator-ConnectionStateManager-0] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener.stateChanged(CuratorZookeeperClient.java:372):  [DUBBO] Curator zookeeper client instance initiated successfully, session id is 1004883b93d0014, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,256(4641) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config', stat=502,502,1632295029184,1632295029184,0,7,0,0,0,7,1560
, data=[]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,261(4646) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/MIGRATION', stat=508,508,1632295032078,1632295032078,0,0,0,0,0,0,508
, data=[]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,261(4646) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/configurators', stat=581,581,1632388838589,1632388838589,0,0,0,0,13,0,581
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,263(4648) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/consumers', stat=579,579,1632388838572,1632388838572,0,0,0,0,13,0,579
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,264(4649) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/dubbo', stat=503,503,1632295029219,1632295029219,0,0,0,0,0,0,503
, data=[]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,267(4652) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping', stat=1560,1560,1658113990529,1658113990529,0,1,0,0,13,1,1561
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,268(4653) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/providers', stat=578,578,1632388838562,1632388838562,0,0,0,0,13,0,578
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,269(4654) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/routers', stat=580,580,1632388838581,1632388838581,0,0,0,0,13,0,580
, data=[49, 57, 50, 46, 49, 54, 56, 46, 52, 56, 46, 54, 54]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,270(4655) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService', stat=1561,1561,1658113990538,1658113990538,0,6,0,0,13,2,1604
, data=[49, 55, 50, 46, 49, 55, 46, 50, 50, 56, 46, 49, 55]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,273(4658) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo', stat=1587,1587,1658123679404,1658123679404,0,0,0,0,13,0,1587
, data=[49, 54, 53, 56, 49, 50, 51, 54, 55, 57, 51, 56, 56]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,273(4658) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:ChildData{path='/dubbo/config/mapping/com.lp.dubbo_demo.service.UserService/dubbo_demo_provider', stat=1604,1604,1658125797383,1658125797383,0,0,0,0,13,0,1604
, data=[49, 54, 53, 56, 49, 50, 53, 55, 57, 55, 51, 54, 57]}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,274(4659) --> [ZookeeperDynamicConfiguration-thread-1] org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:301):  [DUBBO] listen the zookeeper changed. The changed data:null, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[WARN ] 2022-07-18 15:06:45,284(4669) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:76):  [DUBBO] You specified the config centre, but there's not even one single config item in it., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[WARN ] 2022-07-18 15:06:45,285(4670) --> [main] org.apache.dubbo.common.config.ConfigurationUtils.parseProperties(ConfigurationUtils.java:76):  [DUBBO] You specified the config centre, but there's not even one single config item in it., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[WARN ] 2022-07-18 15:06:45,294(4679) --> [main] org.apache.dubbo.config.AbstractInterfaceConfig.checkMetadataReport(AbstractInterfaceConfig.java:266):  [DUBBO] There's no valid metadata config found, if you are using the simplified mode of registry url, please make sure you have a metadata address configured properly., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,326(4711) --> [main] org.apache.dubbo.config.ServiceConfig.findConfigedHosts(ServiceConfig.java:690):  [DUBBO] No valid ip found from environment, try to find valid host from DNS., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,366(4751) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.monitor;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements org.apache.dubbo.monitor.MonitorFactory {
public org.apache.dubbo.monitor.Monitor getMonitor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.monitor.MonitorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.monitor.MonitorFactory extension = (org.apache.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,384(4769) --> [main] org.apache.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:648):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry url : injvm://127.0.0.1/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,386(4771) --> [main] org.apache.dubbo.config.AbstractInterfaceConfig.checkMonitor(AbstractInterfaceConfig.java:238):  [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,386(4771) --> [main] org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:594):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300 to registry registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&pid=956&qos.enable=false&registry=zookeeper&release=2.7.4.1&timeout=10000&timestamp=1658128005295, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,396(4781) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,410(4795) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:45,418(4803) --> [main] org.apache.dubbo.qos.protocol.QosProtocolWrapper.startQosServer(QosProtocolWrapper.java:90):  [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,438(4823) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements org.apache.dubbo.remoting.Transporter {
public org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([client, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public org.apache.dubbo.remoting.Server bind(org.apache.dubbo.common.URL arg0, org.apache.dubbo.remoting.ChannelHandler arg1) throws org.apache.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Transporter) name from url (" + url.toString() + ") use keys([server, transporter])");
org.apache.dubbo.remoting.Transporter extension = (org.apache.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,453(4838) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.remoting;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements org.apache.dubbo.remoting.Dispatcher {
public org.apache.dubbo.remoting.ChannelHandler dispatch(org.apache.dubbo.remoting.ChannelHandler arg0, org.apache.dubbo.common.URL arg1)  {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.remoting.Dispatcher) name from url (" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
org.apache.dubbo.remoting.Dispatcher extension = (org.apache.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(org.apache.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:45,465(4850) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.common.threadpool;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements org.apache.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.common.threadpool.ThreadPool) name from url (" + url.toString() + ") use keys([threadpool])");
org.apache.dubbo.common.threadpool.ThreadPool extension = (org.apache.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:48,645(8030) --> [main] org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:73):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:48,649(8034) --> [main] org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperTransporter.connect(AbstractZookeeperTransporter.java:58):  [DUBBO] find valid zookeeper client from the cache for address: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=956&qos.enable=false&release=2.7.4.1&timeout=10000&timestamp=1658128005295, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:48,652(8037) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:280):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&release=2.7.4.1&side=provider&timestamp=1658128005300, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:48,667(8052) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:305):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:06:48,672(8057) --> [main] org.apache.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:399):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300], dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:48,673(8058) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:525):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300], dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:48,673(8058) --> [main] org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:529):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300], dubbo version: 2.7.4.1, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:06:48,675(8060) --> [main] org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator.generate(AdaptiveClassCodeGenerator.java:105):  [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements org.apache.dubbo.rpc.cluster.ConfiguratorFactory {
public org.apache.dubbo.rpc.cluster.Configurator getConfigurator(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.ConfiguratorFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.ConfiguratorFactory extension = (org.apache.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.7.4.1, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:20:30,789(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 15:25:36,548(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 15:25:38,221(1673) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:38,221(1673) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 15:25:38,245(1697) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:38,245(1697) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,206(3658) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,412(3864) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,490(3942) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,550(4002) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,561(4013) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,572(4024) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,581(4033) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,582(4034) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,582(4034) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&check=false&dubbo=2.6.2&dynamic=false&pid=1456&registry=zookeeper&timestamp=1658129140496, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,587(4039) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,596(4048) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,617(4069) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,639(4091) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,656(4108) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,687(4139) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,723(4175) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,729(4181) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,819(4271) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,879(4331) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:25:40,899(4351) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,900(4352) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,901(4353) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,908(4360) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:25:40,918(4370) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:18,132(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 15:35:20,261(2129) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:20,262(2130) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 15:35:20,291(2159) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:20,292(2160) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,305(4173) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,541(4409) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:22,657(4525) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,726(4594) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,744(4612) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,760(4628) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:22,777(4645) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:22,777(4645) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:22,778(4646) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&check=false&dubbo=2.6.2&dynamic=false&pid=13188&registry=zookeeper&timestamp=1658129722665, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,786(4654) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,802(4670) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,841(4709) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,863(4731) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,878(4746) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,905(4773) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:22,935(4803) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:22,940(4808) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:22,953(4821) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-localhost:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1456&side=provider&timestamp=1658129140502}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:23,070(4938) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:23,116(4984) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:35:23,133(5001) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:23,135(5003) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:23,136(5004) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:23,142(5010) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 15:35:23,150(5018) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 15:42:02,094(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 15:42:36,315(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 15:44:13,879(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:06:15,276(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:06:17,130(1854) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:17,130(1854) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:06:17,151(1875) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:17,151(1875) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:19,359(4083) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:19,702(4426) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:19,892(4616) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:19,996(4720) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,015(4739) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,033(4757) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,047(4771) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,048(4772) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,048(4772) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&check=false&dubbo=2.6.2&dynamic=false&pid=1232&registry=zookeeper&timestamp=1658131579899, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,056(4780) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,070(4794) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,101(4825) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,122(4846) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,140(4864) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,178(4902) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,212(4936) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,218(4942) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,231(4955) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-localhost:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=13188&side=provider&timestamp=1658129722671}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,337(5061) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,387(5111) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:06:20,403(5127) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,405(5129) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,406(5130) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,412(5136) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:06:20,423(5147) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:10,843(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:15:12,984(2141) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:12,986(2143) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:15:13,038(2195) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:13,039(2196) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,238(4395) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,454(4611) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,540(4697) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,599(4756) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,610(4767) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,621(4778) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,630(4787) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,631(4788) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,631(4788) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&check=false&dubbo=2.6.2&dynamic=false&pid=9888&registry=zookeeper&timestamp=1658132115545, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,636(4793) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,645(4802) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,666(4823) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,684(4841) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,697(4854) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,728(4885) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,759(4916) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,764(4921) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,777(4934) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-localhost:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=1232&side=provider&timestamp=1658131579909}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,858(5015) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,907(5064) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:15:15,928(5085) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,930(5087) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,930(5087) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,938(5095) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:15:15,955(5112) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:27,209(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:21:29,063(1854) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:29,063(1854) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:21:29,096(1887) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:29,101(1892) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp.dubbo_demo_provider], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:30,997(3788) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,193(3984) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,272(4063) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,331(4122) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,342(4133) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,352(4143) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,361(4152) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,361(4152) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,362(4153) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&check=false&dubbo=2.6.2&dynamic=false&pid=15524&registry=zookeeper&timestamp=1658132491278, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,367(4158) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,375(4166) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,393(4184) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,410(4201) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,423(4214) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,451(4242) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,484(4275) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,490(4281) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,501(4292) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-localhost:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=9888&side=provider&timestamp=1658132115551}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,580(4371) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,662(4453) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:21:31,680(4471) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,682(4473) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,683(4474) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,692(4483) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:21:31,702(4493) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:30:46,952(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 16:30:49,804(2852) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:49,886(2934) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:49,902(2950) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,001(3049) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,031(3079) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,151(3199) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,165(3213) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:30:50,175(3223) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&default.check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&side=consumer&timestamp=1658133049968, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:30:50,212(3260) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&default.check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&side=consumer&timestamp=1658133049968, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:30:50,245(3293) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&default.check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&side=consumer&timestamp=1658133049968, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=15524&side=provider&timestamp=1658132491284, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&default.check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&side=consumer&timestamp=1658133049968, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&default.check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&side=consumer&timestamp=1658133049968], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,267(3315) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,305(3353) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:50,327(3375) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:30:51,394(4442) --> [main] com.alibaba.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:98):  [DUBBO] Failed to start NettyClient DESKTOP-T987IHU/172.17.228.17 connect to the server /172.17.228.17:20880 (check == false, ignore and retry later!), cause: client(url: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&codec=dubbo&default.check=false&dubbo=2.6.2&dynamic=false&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&register.ip=172.17.228.17&remote.timestamp=1658132491284&side=consumer&timestamp=1658133049968) failed to connect to server /172.17.228.17:20880, error message is:Connection refused: no further information, dubbo version: 2.6.2, current host: 172.17.228.17  
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&codec=dubbo&default.check=false&dubbo=2.6.2&dynamic=false&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&register.ip=172.17.228.17&remote.timestamp=1658132491284&side=consumer&timestamp=1658133049968) failed to connect to server /172.17.228.17:20880, error message is:Connection refused: no further information
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:124)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:275)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:89)
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.<init>(NettyClient.java:59)
	at com.alibaba.dubbo.remoting.transport.netty.NettyTransporter.connect(NettyTransporter.java:37)
	at com.alibaba.dubbo.remoting.Transporter$Adaptive.connect(Transporter$Adaptive.java)
	at com.alibaba.dubbo.remoting.Transporters.connect(Transporters.java:75)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchanger.connect(HeaderExchanger.java:39)
	at com.alibaba.dubbo.remoting.exchange.Exchangers.connect(Exchangers.java:109)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.initClient(DubboProtocol.java:409)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.getSharedClient(DubboProtocol.java:377)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.getClients(DubboProtocol.java:354)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.refer(DubboProtocol.java:336)
	at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:67)
	at com.alibaba.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:65)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:108)
	at com.alibaba.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)
	at com.alibaba.dubbo.registry.integration.RegistryDirectory.toInvokers(RegistryDirectory.java:387)
	at com.alibaba.dubbo.registry.integration.RegistryDirectory.refreshInvoker(RegistryDirectory.java:253)
	at com.alibaba.dubbo.registry.integration.RegistryDirectory.notify(RegistryDirectory.java:223)
	at com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:414)
	at com.alibaba.dubbo.registry.support.FailbackRegistry.doNotify(FailbackRegistry.java:274)
	at com.alibaba.dubbo.registry.support.FailbackRegistry.notify(FailbackRegistry.java:260)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doSubscribe(ZookeeperRegistry.java:190)
	at com.alibaba.dubbo.registry.support.FailbackRegistry.subscribe(FailbackRegistry.java:190)
	at com.alibaba.dubbo.registry.integration.RegistryDirectory.subscribe(RegistryDirectory.java:159)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol.doRefer(RegistryProtocol.java:305)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:286)
	at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:65)
	at com.alibaba.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:63)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:106)
	at com.alibaba.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)
	at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:394)
	at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:333)
	at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163)
	at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:474)
	at java.lang.String.valueOf(String.java:2994)
	at java.lang.StringBuilder.append(StringBuilder.java:131)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder.build(AbstractAnnotationConfigBeanBuilder.java:79)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildReferenceBean(ReferenceAnnotationBeanPostProcessor.java:385)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.access$100(ReferenceAnnotationBeanPostProcessor.java:65)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceFieldElement.inject(ReferenceAnnotationBeanPostProcessor.java:363)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.postProcessPropertyValues(ReferenceAnnotationBeanPostProcessor.java:92)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.lp.dubbo_demo_consumer.DubboDemoConsumerApplication.main(DubboDemoConsumerApplication.java:10)
Caused by: java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:715)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.connect(NioClientSocketPipelineSink.java:384)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processSelectedKeys(NioClientSocketPipelineSink.java:354)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:276)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
[DEBUG] 2022-07-18 16:30:51,436(4484) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:51,448(4496) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:30:51,459(4507) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:30:51,471(4519) --> [main] com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:425):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&default.check=false&dubbo=2.6.2&dynamic=false&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&register.ip=172.17.228.17&remote.timestamp=1658132491284&side=consumer&timestamp=1658133049968, dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:30:53,365(6413) --> [DubboClientReconnectTimer-thread-1] com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:171):  [DUBBO] client reconnect to 172.17.228.17:20880 find error . url: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&codec=dubbo&default.check=false&dubbo=2.6.2&dynamic=false&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&register.ip=172.17.228.17&remote.timestamp=1658132491284&side=consumer&timestamp=1658133049968, dubbo version: 2.6.2, current host: 172.17.228.17  
com.alibaba.dubbo.remoting.RemotingException: client(url: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_consumer&check=false&codec=dubbo&default.check=false&dubbo=2.6.2&dynamic=false&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8708&register.ip=172.17.228.17&remote.timestamp=1658132491284&side=consumer&timestamp=1658133049968) failed to connect to server /172.17.228.17:20880, error message is:connection timed out
	at com.alibaba.dubbo.remoting.transport.netty.NettyClient.doConnect(NettyClient.java:124)
	at com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:275)
	at com.alibaba.dubbo.remoting.transport.AbstractClient$1.run(AbstractClient.java:156)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: connection timed out
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.processConnectTimeout(NioClientSocketPipelineSink.java:371)
	at org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss.run(NioClientSocketPipelineSink.java:283)
	... 3 more
[INFO ] 2022-07-18 16:31:30,886(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 16:31:33,794(2908) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:31:33,880(2994) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:31:33,894(3008) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:31:33,937(3051) --> [main] com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:484):  [DUBBO] null, dubbo version: 2.6.2, current host: 172.17.228.17  
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:474)
	at java.lang.String.valueOf(String.java:2994)
	at java.lang.StringBuilder.append(StringBuilder.java:131)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder.build(AbstractAnnotationConfigBeanBuilder.java:79)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildReferenceBean(ReferenceAnnotationBeanPostProcessor.java:385)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.access$100(ReferenceAnnotationBeanPostProcessor.java:65)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceFieldElement.inject(ReferenceAnnotationBeanPostProcessor.java:363)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.postProcessPropertyValues(ReferenceAnnotationBeanPostProcessor.java:92)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.lp.dubbo_demo_consumer.DubboDemoConsumerApplication.main(DubboDemoConsumerApplication.java:10)
Caused by: java.lang.IllegalStateException: No such application config! Please add <dubbo:application name="..." /> to your spring config.
	at com.alibaba.dubbo.config.AbstractInterfaceConfig.checkApplication(AbstractInterfaceConfig.java:143)
	at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:278)
	at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163)
	at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:66)
	... 31 more
[INFO ] 2022-07-18 16:34:16,042(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:35:20,094(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:36:26,621(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:37:03,032(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:38:06,531(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:39:16,075(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:41:43,401(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:43:42,236(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:44:10,022(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 16:44:13,437(3415) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:44:13,553(3531) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:44:13,572(3550) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:44:13,709(3687) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:44:13,727(3705) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:44:13,846(3824) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:44:13,865(3843) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:44:13,877(3855) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:44:13,930(3908) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:44:13,960(3938) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641, urls: [empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641], dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:44:13,966(3944) --> [main] com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:484):  [DUBBO] null, dubbo version: 2.6.2, current host: 172.17.228.17  
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:474)
	at java.lang.String.valueOf(String.java:2994)
	at java.lang.StringBuilder.append(StringBuilder.java:131)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder.build(AbstractAnnotationConfigBeanBuilder.java:79)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildReferenceBean(ReferenceAnnotationBeanPostProcessor.java:385)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.access$100(ReferenceAnnotationBeanPostProcessor.java:65)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceFieldElement.inject(ReferenceAnnotationBeanPostProcessor.java:363)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.postProcessPropertyValues(ReferenceAnnotationBeanPostProcessor.java:92)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.lp.dubbo_demo_consumer.DubboDemoConsumerApplication.main(DubboDemoConsumerApplication.java:10)
Caused by: java.lang.IllegalStateException: Failed to check the status of the service com.lp.dubbo_demo.service.UserService. No provider available for the service com.lp.dubbo_demo.service.UserService from the url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&register.ip=172.17.228.17&side=consumer&timestamp=1658133853641 to the consumer 172.17.228.17 use dubbo version 2.6.2
	at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:422)
	at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:333)
	at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163)
	at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:66)
	... 31 more
[INFO ] 2022-07-18 16:45:49,228(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 16:45:51,767(2539) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:45:51,855(2627) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:45:51,869(2641) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:45:51,951(2723) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:45:51,967(2739) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:45:51,981(2753) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_consumer-127.0.0.1:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7772&side=consumer&timestamp=1658133853641}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:45:52,111(2883) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:45:52,125(2897) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:45:52,134(2906) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:45:52,165(2937) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:45:52,194(2966) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918, urls: [empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918], dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:45:52,198(2970) --> [main] com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:484):  [DUBBO] null, dubbo version: 2.6.2, current host: 172.17.228.17  
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:474)
	at java.lang.String.valueOf(String.java:2994)
	at java.lang.StringBuilder.append(StringBuilder.java:131)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder.build(AbstractAnnotationConfigBeanBuilder.java:79)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildReferenceBean(ReferenceAnnotationBeanPostProcessor.java:385)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.access$100(ReferenceAnnotationBeanPostProcessor.java:65)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceFieldElement.inject(ReferenceAnnotationBeanPostProcessor.java:363)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.postProcessPropertyValues(ReferenceAnnotationBeanPostProcessor.java:92)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.lp.dubbo_demo_consumer.DubboDemoConsumerApplication.main(DubboDemoConsumerApplication.java:10)
Caused by: java.lang.IllegalStateException: Failed to check the status of the service com.lp.dubbo_demo.service.UserService. No provider available for the service com.lp.dubbo_demo.service.UserService from the url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_consumer&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&register.ip=172.17.228.17&side=consumer&timestamp=1658133951918 to the consumer 172.17.228.17 use dubbo version 2.6.2
	at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:422)
	at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:333)
	at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163)
	at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:66)
	... 31 more
[INFO ] 2022-07-18 16:47:31,080(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:49:42,240(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:49:44,409(2169) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:49:44,409(2169) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:49:44,435(2195) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:49:44,435(2195) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:49:46,439(4199) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:49:46,646(4406) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:49:46,751(4511) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:49:48,272(6032) --> [DubboShutdownHook] com.alibaba.dubbo.config.AbstractConfig$1.run(AbstractConfig.java:81):  [DUBBO] Run shutdown hook now., dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:49:48,274(6034) --> [DubboShutdownHook] com.alibaba.dubbo.registry.support.AbstractRegistryFactory.destroyAll(AbstractRegistryFactory.java:64):  [DUBBO] Close all registries [], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:11,270(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[INFO ] 2022-07-18 16:50:13,102(1832) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:190):  [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:13,102(1832) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.resolveBeanNameGenerator(ServiceAnnotationBeanPostProcessor.java:192):  [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:50:13,126(1856) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBean(ServiceAnnotationBeanPostProcessor.java:265):  [DUBBO] The BeanDefinition[Root bean: class [com.alibaba.dubbo.config.spring.ServiceBean]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] of ServiceBean has been registered with name : ServiceBean:userServiceImpl:com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:13,126(1856) --> [main] com.alibaba.dubbo.config.spring.beans.factory.annotation.ServiceAnnotationBeanPostProcessor.registerServiceBeans(ServiceAnnotationBeanPostProcessor.java:147):  [DUBBO] 1 annotated Dubbo's @Service Components { [Bean definition with name 'userServiceImpl': Generic bean: class [com.lp.dubbo_demo_provider.service.UserServiceImpl]; scope=; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [E:\github\myResource_02\start_demo_02\dubbo_demo_provider\target\classes\com\lp\dubbo_demo_provider\service\UserServiceImpl.class]] } were scanned under package[com.lp], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,095(3825) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,299(4029) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,382(4112) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:121):  [DUBBO] The service ready on spring started. service: com.lp.dubbo_demo.service.UserService, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,438(4168) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,449(4179) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,459(4189) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,471(4201) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:532):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to local registry, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,471(4201) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:491):  [DUBBO] Export dubbo service com.lp.dubbo_demo.service.UserService to url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,472(4202) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:501):  [DUBBO] Register dubbo service com.lp.dubbo_demo.service.UserService url dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=dubbo_demo_provider&dubbo=2.6.2&pid=11340&registry=zookeeper&timeout=10000&timestamp=1658134215388, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,477(4207) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,488(4218) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,509(4239) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,526(4256) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,541(4271) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,573(4303) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:73):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,607(4337) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:65):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,613(4343) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,628(4358) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_provider-127.0.0.1:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bean.name=ServiceBean:com.lp.dubbo_demo.service.UserService&bind.ip=172.17.228.17&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=956&qos.enable=false&release=2.7.4.1&side=provider&timestamp=1658128005300}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,727(4457) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,786(4516) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:15,804(4534) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,805(4535) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:366):  [DUBBO] original override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,806(4536) --> [main] com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener.notify(RegistryProtocol.java:368):  [DUBBO] subscribe url: provider://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, override urls: [empty://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&category=configurators&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,812(4542) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:15,822(4552) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:29,878(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 16:50:32,394(2516) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,482(2604) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,496(2618) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,580(2702) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,593(2715) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:32,623(2745) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_consumer-127.0.0.1:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=8152&side=consumer&timestamp=1658133951918}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,732(2854) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,746(2868) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:32,755(2877) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:32,785(2907) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:32,815(2937) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,834(2956) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,870(2992) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,888(3010) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:32,959(3081) --> [main] com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:282):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 172.17.228.17 using dubbo version 2.6.2, channel is NettyChannel [channel=[id: 0x252f626c, /172.17.228.17:50449 => /172.17.228.17:20880]], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:32,959(3081) --> [main] com.alibaba.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:91):  [DUBBO] Start NettyClient DESKTOP-T987IHU/172.17.228.17 connect to the server /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:32,989(3111) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:33,000(3122) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:50:33,011(3133) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:50:33,025(3147) --> [main] com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:425):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&register.ip=172.17.228.17&remote.timestamp=1658134215394&side=consumer&timestamp=1658134232545, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:51:09,074(57804) --> [DubboServerHandler-172.17.228.17:20880-thread-2] com.alibaba.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:59):  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.2, current host: 172.17.228.17  
[ERROR] 2022-07-18 16:51:09,913(58643) --> [DubboServerHandler-172.17.228.17:20880-thread-2] com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:85):  [DUBBO] Got unchecked and undeclared exception which called by 172.17.228.17. service: com.lp.dubbo_demo.service.UserService, method: findAll, exception: org.springframework.jdbc.IncorrectResultSetColumnCountException: Incorrect column count: expected 1, actual 6, dubbo version: 2.6.2, current host: 172.17.228.17  
org.springframework.jdbc.IncorrectResultSetColumnCountException: Incorrect column count: expected 1, actual 6
	at org.springframework.jdbc.core.SingleColumnRowMapper.mapRow(SingleColumnRowMapper.java:108)
	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:94)
	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:61)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:440)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:462)
	at org.springframework.jdbc.core.JdbcTemplate.queryForList(JdbcTemplate.java:485)
	at com.lp.dubbo_demo_provider.dao.UserDao.findAll(UserDao.java:23)
	at com.lp.dubbo_demo_provider.dao.UserDao$$FastClassBySpringCGLIB$$cfe959cc.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.lp.dubbo_demo_provider.dao.UserDao$$EnhancerBySpringCGLIB$$50f72039.findAll(<generated>)
	at com.lp.dubbo_demo_provider.service.UserServiceImpl.findAll(UserServiceImpl.java:23)
	at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:47)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:76)
	at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:52)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:56)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:62)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:42)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:78)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:72)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:131)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:103)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:172)
	at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51)
	at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:80)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
[DEBUG] 2022-07-18 16:51:09,953(40075) --> [DubboClientHandler-172.17.228.17:20880-thread-1] com.alibaba.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:59):  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:52:15,615(105737) --> [New I/O client worker #1-1] com.alibaba.dubbo.remoting.exchange.support.header.HeartbeatHandler.received(HeartbeatHandler.java:74):  [DUBBO] Received heartbeat from remote channel /172.17.228.17:20880, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:52:15,616(124346) --> [New I/O server worker #1-1] com.alibaba.dubbo.remoting.exchange.support.header.HeartbeatHandler.received(HeartbeatHandler.java:84):  [DUBBO] Receive heartbeat response in thread New I/O server worker #1-1, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:52:15,622(124352) --> [dubbo-remoting-server-heartbeat-thread-1] com.alibaba.dubbo.remoting.exchange.support.header.HeartBeatTask.run(HeartBeatTask.java:65):  [DUBBO] Send heartbeat to remote channel /172.17.228.17:50449, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms, dubbo version: 2.6.2, current host: 172.17.228.17  
[WARN ] 2022-07-18 16:53:09,287(178017) --> [New I/O server worker #1-1] com.alibaba.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:205):  [DUBBO] All clients has discontected from /172.17.228.17:20880. You can graceful shutdown now., dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:09,292(178022) --> [DubboServerHandler-172.17.228.17:20880-thread-4] com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:127):  [DUBBO] disconnected from /172.17.228.17:50449,url:dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&bind.ip=172.17.228.17&bind.port=20880&channel.readonly.sent=true&codec=dubbo&dubbo=2.6.2&generic=false&heartbeat=60000&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:19,463(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2022-07-18 16:53:22,300(2837) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,381(2918) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,394(2931) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws com.alibaba.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,472(3009) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,485(3022) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adaptive implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "curator"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,498(3035) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:200):  [DUBBO] Load registry store file C:\Users\TY\.dubbo\dubbo-registry-dubbo_demo_consumer-127.0.0.1:2181.cache, data: {com.lp.dubbo_demo.service.UserService=empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545 empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=7116&side=consumer&timestamp=1658134232545 dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,626(3163) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,642(3179) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adaptive implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,653(3190) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:273):  [DUBBO] Register: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=consumers&check=false&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11320&side=consumer&timestamp=1658134402440, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,681(3218) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:298):  [DUBBO] Subscribe: consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11320&side=consumer&timestamp=1658134402440, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,709(3246) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:387):  [DUBBO] Notify urls for subscribe url consumer://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=providers,configurators,routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11320&side=consumer&timestamp=1658134402440, urls: [dubbo://172.17.228.17:20880/com.lp.dubbo_demo.service.UserService?anyhost=true&application=dubbo_demo_provider&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11340&side=provider&timestamp=1658134215394, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=configurators&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11320&side=consumer&timestamp=1658134402440, empty://172.17.228.17/com.lp.dubbo_demo.service.UserService?application=dubbo_demo_consumer&category=routers&dubbo=2.6.2&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11320&side=consumer&timestamp=1658134402440], dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,726(3263) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adaptive implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.remoting.RemotingException {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,753(3290) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adaptive implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,765(3302) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adaptive implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,834(3371) --> [main] com.alibaba.dubbo.remoting.transport.AbstractClient.connect(AbstractClient.java:282):  [DUBBO] Successed connect to server /172.17.228.17:20880 from NettyClient 172.17.228.17 using dubbo version 2.6.2, channel is NettyChannel [channel=[id: 0x08d7b252, /172.17.228.17:54524 => /172.17.228.17:20880]], dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,836(3373) --> [main] com.alibaba.dubbo.remoting.transport.AbstractClient.<init>(AbstractClient.java:91):  [DUBBO] Start NettyClient DESKTOP-T987IHU/172.17.228.17 connect to the server /172.17.228.17:20880, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,860(3397) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adaptive implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.rpc.Invocation arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
if (arg1 == null) throw new IllegalArgumentException("invocation == null");
String methodName = arg1.getMethodName();
String extName = url.getMethodParameter(methodName, "cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0, arg1);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,876(3413) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adaptive implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:22,891(3428) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:941):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adaptive implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.6.2, current host: 172.17.228.17  
[INFO ] 2022-07-18 16:53:22,906(3443) --> [main] com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:425):  [DUBBO] Refer dubbo service com.lp.dubbo_demo.service.UserService from url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo_demo_consumer&check=false&dubbo=2.6.2&generic=false&interface=com.lp.dubbo_demo.service.UserService&methods=findAll&pid=11320&register.ip=172.17.228.17&remote.timestamp=1658134215394&side=consumer&timestamp=1658134402440, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:53:34,892(203622) --> [DubboServerHandler-172.17.228.17:20880-thread-6] com.alibaba.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:59):  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.6.2, current host: 172.17.228.17  
[ERROR] 2022-07-18 16:53:34,911(203641) --> [DubboServerHandler-172.17.228.17:20880-thread-6] com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:85):  [DUBBO] Got unchecked and undeclared exception which called by 172.17.228.17. service: com.lp.dubbo_demo.service.UserService, method: findAll, exception: org.springframework.jdbc.IncorrectResultSetColumnCountException: Incorrect column count: expected 1, actual 6, dubbo version: 2.6.2, current host: 172.17.228.17  
org.springframework.jdbc.IncorrectResultSetColumnCountException: Incorrect column count: expected 1, actual 6
	at org.springframework.jdbc.core.SingleColumnRowMapper.mapRow(SingleColumnRowMapper.java:108)
	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:94)
	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:61)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:440)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:462)
	at org.springframework.jdbc.core.JdbcTemplate.queryForList(JdbcTemplate.java:485)
	at com.lp.dubbo_demo_provider.dao.UserDao.findAll(UserDao.java:23)
	at com.lp.dubbo_demo_provider.dao.UserDao$$FastClassBySpringCGLIB$$cfe959cc.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.lp.dubbo_demo_provider.dao.UserDao$$EnhancerBySpringCGLIB$$50f72039.findAll(<generated>)
	at com.lp.dubbo_demo_provider.service.UserServiceImpl.findAll(UserServiceImpl.java:23)
	at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:47)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:76)
	at com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:52)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:56)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:62)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:42)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:78)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:72)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:131)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72)
	at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:103)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96)
	at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:172)
	at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51)
	at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:80)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
[DEBUG] 2022-07-18 16:53:34,933(15470) --> [DubboClientHandler-172.17.228.17:20880-thread-1] com.alibaba.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:59):  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:55:15,655(304385) --> [dubbo-remoting-server-heartbeat-thread-1] com.alibaba.dubbo.remoting.exchange.support.header.HeartBeatTask.run(HeartBeatTask.java:65):  [DUBBO] Send heartbeat to remote channel /172.17.228.17:54524, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:55:15,661(304391) --> [New I/O server worker #1-2] com.alibaba.dubbo.remoting.exchange.support.header.HeartbeatHandler.received(HeartbeatHandler.java:84):  [DUBBO] Receive heartbeat response in thread New I/O server worker #1-2, dubbo version: 2.6.2, current host: 172.17.228.17  
[DEBUG] 2022-07-18 16:55:15,661(116198) --> [New I/O client worker #1-1] com.alibaba.dubbo.remoting.exchange.support.header.HeartbeatHandler.received(HeartbeatHandler.java:74):  [DUBBO] Received heartbeat from remote channel /172.17.228.17:20880, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms, dubbo version: 2.6.2, current host: 172.17.228.17  
